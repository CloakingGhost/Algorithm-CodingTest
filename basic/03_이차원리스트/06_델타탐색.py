# 델타(delta, 변량: 얼마나 변했는가) 탐색
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

n = len(matrix)  # 행의 개수
m = len(matrix[0])  # 열의 개수


#        (0, 1)
# (1, 0) (1, 1) (1, 2)
#        (2, 1)

# 상, 하, 좌, 우
dx = [-1, 1, 0, 0]  # 행 이동
dy = [0, 0, -1, 1]  # 열 이동

# 델타 탐색
# 1. 기준점 잡기
x, y = 1, 1  # 기준점 (1, 1) 위치

# 2. 델타값 정의
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# 3. 이동하기
## 미리 이동해보기
## 상
nx = x + dx[0]
ny = y + dy[0]
## 하
nx = x + dx[1]
ny = y + dy[1]
## 좌
nx = x + dx[2]
ny = y + dy[2]
## 우
nx = x + dx[3]
ny = y + dy[3]

# 4. 범위 확인 및 실제 이동
if 0 <= nx < n and 0 <= ny < m:
    x = nx
    y = ny

# 번외 #
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
n = len(matrix)
m = len(matrix[0])

# 1. 기준점 잡기
x, y = 1, 1

# 2. 델타값 정의
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# 3. 이동하기
for i in range(4):  # 상 -> 하 -> 좌 -> 우
    nx = x + dx[i]
    ny = y + dy[i]

    # 4. 범위 확인 및 출력
    if 0 <= nx < n and 0 <= ny < m:
        print(f"({x}, {y}) -> ({nx}, {ny}) = {matrix[nx][ny]}")


# 번외 : 8방향 #

## 상, 하, 좌, 우, 좌상, 우상, 좌하, 우하
dx = [-1, 1, 0, 0, -1, -1, 1, 1]
dy = [0, 0, -1, 1, -1, 1, -1, 1]

for i in range(8):  # 상 -> 하 -> 좌 -> 우 -> 좌상 -> 우상 -> 좌하 -> 우하
    nx = x + dx[i]
    ny = y + dy[i]

    # 범위 확인 및 출력
    if 0 <= nx < n and 0 <= ny < m:
        print(f"({x}, {y}) -> ({nx}, {ny}) = {matrix[nx][ny]}")
